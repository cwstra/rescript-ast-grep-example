// Generated by ReScript, PLEASE EDIT WITH CARE

import Shelljs from "shelljs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

function echo(str) {
  Shelljs.echo(str);
}

function cd(path) {
  Shelljs.cd(path);
}

function ls(path) {
  return Shelljs.ls(path);
}

function exec(cmd) {
  Shelljs.exec(cmd);
}

function cat(path) {
  return Shelljs.cat(path);
}

function sed(searchFor, $$new, file) {
  return Shelljs.sed(searchFor, $$new, file);
}

function sedInPlace(searchFor, $$new, file) {
  return Shelljs.sed("-i", searchFor, $$new, file);
}

var Shell = {
  echo: echo,
  cd: cd,
  ls: ls,
  exec: exec,
  cat: cat,
  sed: sed,
  sedInPlace: sedInPlace
};

var CouldNotFindBinary = /* @__PURE__ */Caml_exceptions.create("Scripts__UpdateTreeSitterBinary.CouldNotFindBinary");

var MultipleBinaries = /* @__PURE__ */Caml_exceptions.create("Scripts__UpdateTreeSitterBinary.MultipleBinaries");

Shelljs.cd("node_modules/tree-sitter-rescript");

Shelljs.exec("../.bin/tree-sitter build");

var binaries = Shelljs.ls("rescript.*");

var len = binaries.length;

var binary_name;

if (len !== 1) {
  if (len !== 0) {
    throw {
          RE_EXN_ID: MultipleBinaries,
          _1: binaries,
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: CouldNotFindBinary,
        Error: new Error()
      };
}

binary_name = binaries[0];

Shelljs.cd("../../");

console.log(sedInPlace(new RegExp("libraryPath:.*$"), "libraryPath: ./node_modules/tree-sitter-rescript/" + binary_name, "sgconfig.yml"));

export {
  Shell ,
  CouldNotFindBinary ,
  MultipleBinaries ,
  binary_name ,
}
/*  Not a pure module */
